#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
const int N=100001;
struct JS{int y,next,cost;}g[2*N];
int i,j,n,m,num;
int v[N],h[N],T1[N],T2[N],C1[N],C2[N];
int DownBack[N],DownCasual[N],UpBack[N],UpCasual[N];
void add(int x,int y,int c)
{
	num++;g[num].y=y;g[num].cost=c;g[num].next=h[x];h[x]=num;
}
void init()
{
	for (i=1;i<=n;i++){h[i]=0;T1[i]=0;T2[i]=0;C1[i]=0;C2[i]=0;}
	num=0;
	scanf("%d",&n);
	for (i=1;i<=n;i++) scanf("%d",&v[i]);
	for (i=1;i<n;i++)
	{
		int x,y,z;
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z);add(y,x,z);
	}
}
void dfs(int x,int fa)
{
	DownBack[x]=v[x];DownCasual[x]=v[x];
	int cur1=0,cur2=0;
	for (int p=h[x];p>0;p=g[p].next)
	{
		int y=g[p].y,c1,c2;
		if (y==fa) continue;
		dfs(y,x);
		if (DownBack[y]>2*g[p].cost) DownBack[x]+=DownBack[y]-2*g[p].cost;
		c1=max(0,DownBack[y]-2*g[p].cost);
		c2=max(0,DownCasual[y]-g[p].cost);
		C1[y]=c1;C2[y]=c2;
		if (c2-c1>cur1)
		{
			cur2=cur1;T2[x]=T1[x];
			cur1=c2-c1;T1[x]=y;
		}
		else
		if (c2-c1>cur2)
		{
			cur2=c2-c1;T2[x]=y;
		}
	}
	//C1[x]=cur1;C2[x]=cur2;
	DownCasual[x]=DownBack[x]+cur1;
	
}
void dfs2(int x,int fa)
{
	for (int p=h[x];p>0;p=g[p].next)
	{
		int y=g[p].y,tmp,z;
		if (y==fa) continue;
		tmp=DownBack[x]-max(0,DownBack[y]-2*g[p].cost);
		if (UpBack[x]>0) tmp+=UpBack[x];
		UpBack[y]=max(0,tmp-2*g[p].cost);
		
		tmp=DownBack[x]-max(0,DownBack[y]-2*g[p].cost);
		tmp+=UpCasual[x];
		UpCasual[y]=max(0,tmp-g[p].cost);
		
		tmp=DownBack[x]-max(0,DownBack[y]-2*g[p].cost);
		if (T1[x]!=y) z=T1[x];else z=T2[x];
		tmp+=C2[z]-C1[z];tmp+=UpBack[x];
		UpCasual[y]=max(UpCasual[y],tmp-g[p].cost);
		
		dfs2(y,x);
	}
}
int main()
{
	freopen("1003.in","r",stdin);
	freopen("1003.out","w",stdout);
	
	int Case,cur=0;
	scanf("%d",&Case);
	
	for (cur=1;cur<=Case;cur++)
	{
		printf("Case #%d:\n",cur);
		init();
		dfs(1,0);
		dfs2(1,0);
	//	for (i=1;i<=n;i++) printf("%d ",DownCasual[i]);printf("\n");
		
		for (i=1;i<=n;i++)
			printf("%d\n",max(DownBack[i]+UpCasual[i],DownCasual[i]+UpBack[i]));
	}
}

